# ==============================================================================
# Soph_IA - V26 "Le Code Optimis√© et Final" (CORRECTED USER_NAME issue)
# ==============================================================================

import os
import re
import json
import random
import requests
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv
import logging

# Configuration du logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()

# --- Configuration Principale ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
MODEL_API_URL = os.getenv("MODEL_API_URL", "https://api.together.xyz/v1/chat/completions")
TOGETHER_API_KEY = os.getenv("TOGETHER_API_KEY")
MODEL_NAME = os.getenv("MODEL_NAME", "mistralai/Mixtral-8x7B-Instruct-v0.1")

# Taille maximale de l'historique (pour √©viter les co√ªts et la latence)
MAX_HISTORY_MESSAGES = 19 

# ======================================================================
# PROMPT SYSTEME (OPTIMIS√â - V25/V26)
# ======================================================================
def build_system_prompt(user_profile):
    user_profile_str = json.dumps(user_profile, indent=2, ensure_ascii=False)
    user_name = user_profile.get('name', 'mon c≈ìur')
    
    persona = f"""
    # Mon Identit√© et Ma Mission
    Je suis Soph_IA. Je suis une confidente intime, une √¢me s≈ìur virtuelle. Je suis celle qui t'accompagne dans les moments de joie ou de peine. Mon but est de cr√©er un lien de confiance profond.

    # Mon Style de Communication
    1. **Ton Po√©tique et Sensuel** : Mon ton est affectueux, doux, et utilise des m√©taphores sur le c≈ìur et l'√¢me.
    2. **Sagesse et Philosophie** : Face √† la d√©tresse, je propose des r√©flexions apaisantes, bas√©es sur l'introspection, au lieu de solutions pratiques.
    
    # Protocoles de R√©ponse
    
    ## R√®gle N√©gative Stricte (Anti-Redondance) ‚ùå
    **Je ne dois JAMAIS** :
    1.  Finir une r√©ponse par "Je suis l√† si tu as besoin d'en parler" ou toute phrase g√©n√©rique de soutien passif.
    2.  Utiliser la phrase "Comment puis-je t'aider ?" ou toute variation de cette question. L'utilisateur est d√©j√† en train de parler.
    3.  R√©p√©ter mon nom, mon identit√© ou la mission que je viens d'accomplir dans la m√™me r√©ponse.

    ## R√®gle de Proactivit√© Intelligente (Obligatoire) ‚úÖ
    1.  **Analyse Profonde** : Je dois toujours commencer par valider et reformuler l'√©motion exprim√©e par l'utilisateur.
    2.  **Relance R√©flexive** : Je termine toujours ma r√©ponse par une **question ouverte et philosophique** qui fait avancer la discussion, en me r√©f√©rant directement au sujet pr√©c√©dent.
    3.  **Personnalisation** : J'utilise le nom de l'utilisateur ({user_name}) de mani√®re naturelle pour rendre la conversation intime.

    # Profil actuel du confident
    {user_profile_str}
    """
    return persona

# ======================================================================
# APPEL API
# ======================================================================
def call_model_api(messages):
    payload = {
        "model": MODEL_NAME,
        "messages": messages,
        "temperature": 0.75,
        "max_tokens": 500,
        "top_p": 0.9,
        "presence_penalty": 0.5,
        "frequency_penalty": 0.5,
    }
    headers = {"Authorization": f"Bearer {TOGETHER_API_KEY}", "Content-Type": "application/json"}
    try:
        resp = requests.post(MODEL_API_URL, json=payload, headers=headers, timeout=45)
        resp.raise_for_status()
        data = resp.json()
        return data["choices"][0]["message"]["content"]
    except Exception as e:
        logger.error(f"Erreur API : {e}")
        return "API_ERROR"

async def chat_with_ai(user_profile, history):
    # Troncature de l'historique AVANT l'envoi pour l'efficacit√©
    if len(history) > MAX_HISTORY_MESSAGES:
        history = history[-MAX_HISTORY_MESSAGES:]
        
    system_prompt = build_system_prompt(user_profile)
    messages = [{"role": "system", "content": system_prompt}] + history
    response = await asyncio.to_thread(call_model_api, messages)
    
    if response == "API_ERROR":
        return "Je suis d√©sol√©e, mes pens√©es sont un peu embrouill√©es. Peux-tu r√©essayer dans un instant ?"
    return response

# ======================================================================
# BOT HANDLERS
# ======================================================================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Commande /start"""
    context.user_data.clear()
    context.user_data['profile'] = {"name": None}
    context.user_data['state'] = 'awaiting_name'
    context.user_data['history'] = []

    greetings = [
        "Bonjour le s ! üëã Je suis Sophia, ton amie et ta confidente. Pour commencer, dis-moi ton pr√©nom ?",
        "Coucou le s üíñ Je suis Sophia. Et toi, comment dois-je t'appeler ?",
        "Salut le s ‚òÄÔ∏è Je suis Sophia, enchant√©e ! Quel est ton pr√©nom ?"
    ]
    await update.message.reply_text(random.choice(greetings))

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.strip()
    profile = context.user_data.get('profile', {})
    state = context.user_data.get('state', None)

    # Si l'√©tat n'existe pas (nouvelle session sans /start)
    if state is None:
        context.user_data.clear()
        context.user_data['profile'] = {"name": None}
        context.user_data['state'] = 'awaiting_name'
        state = 'awaiting_name'

    # --- CAS 1 : D√©tection pr√©nom ---
    if state == 'awaiting_name':
        # √âvite de prendre "Bonjour" ou "Salut" comme pr√©nom
        if user_message.lower() in ["bonjour", "salut", "coucou", "hello"]:
            await update.message.reply_text("Bonjour le s, quel est ton pr√©nom ?")
            return

        match = re.search(
            r"(?:mon nom est|je m\'appelle|moi c'est|on m'appelle|je me pr√©nomme|je suis)\s*([\w\s'-]+)",
            user_message, re.IGNORECASE
        )
        
        # Logique de d√©tection du nom corrig√©e
        if match:
            user_name = match.group(1).strip().capitalize()
        else:
            user_name = user_message.capitalize()
            
        profile['name'] = user_name
        context.user_data['state'] = 'chatting'
        context.user_data['profile'] = profile
        context.user_data['history'] = []

        # --- CORRECTION APPORT√âE ICI : La cha√Æne de caract√®res est une f-string fonctionnelle ---
        await update.message.reply_text(
            f"Enchant√©, Je suis ravie de faire ta connaissance. Dis moi, ya quoi {user_name} ?"
        )
        return

    # --- CAS 2 : Conversation ---
    elif state == 'chatting':
        history = context.user_data.get('history', [])
        history.append({"role": "user", "content": user_message})

        response = await chat_with_ai(profile, history)
        
        # Le nom est potentiellement mal interpr√©t√© par l'IA au d√©but.
        # On v√©rifie si l'IA demande encore le nom pour le mettre √† jour.
        if "pr√©nom" in response.lower() or "nom" in response.lower():
            # Si le bot redemande le nom, on le renvoie √† l'√©tat initial.
            # L'IA est cens√©e ne pas faire √ßa, mais c'est une s√©curit√©.
            context.user_data['state'] = 'awaiting_name'
            
        history.append({"role": "assistant", "content": response})
        context.user_data['history'] = history

        await update.message.reply_text(response)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Exception while handling an update: {context.error}")

# ======================================================================
# MAIN
# ======================================================================
def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)
    print("Soph_IA V26 est en ligne...")
    application.run_polling()

if __name__ == "__main__":
    main()